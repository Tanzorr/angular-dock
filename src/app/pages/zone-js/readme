1 Zone.js
Повідомляю про всі асінк операціі.
Ng-zone обгортка посереднк.

const window = {
 onclick: function(){
 console.log('user clicked');
 }
}

const originalOnclick = window.onclick
let counter = 0;

window.onclick = function () {
 originalOnclick()
 counter++;
}

let array = [];
array.push(1);
array = [...array, 1];

detach - не перевіряеться
reatach - повертае

runAutsideAngualar - для частих евентів


1 run(): This method runs a function in a zone. It is commonly used to run Angular code inside a zone so that Angular can detect changes and update the view accordingly.
zone.run(() => {
  // Run change detection here
});

2 fork(): This method creates a new zone that inherits properties from its parent zone. It is commonly used to create a child zone for a specific task or operation.

const childZone = zone.fork({
  name: 'childZone',
  properties: { foo: 'bar' }
});

childZone.run(() => {
  // This code runs in the child zone
  console.log(zone.name); // childZone
  console.log(zone.parent.name); // root
  console.log(zone.get('foo')); // bar
});

3 wrap(): This method creates a function that is executed in a zone. It is commonly used to wrap a function so that it is executed inside a specific zone.

function foo() {
  // This code always runs in the current zone
}

const boundFoo = zone.bind(foo);

boundFoo(); // Runs in the current zone

4 bind(): This method binds a function to a zone. It is commonly used to ensure that a function is always executed inside a specific zone.

function foo() {
  // This code always runs in the current zone
}

const boundFoo = zone.bind(foo);

boundFoo(); // Runs in the current zone

5 scheduleTask(): This method schedules a task to be executed in the current zone. It is commonly used to defer a task until a later time.
zone.scheduleTask(() => {
  // This code runs later
}, 1000);

6 cancelTask(): This method cancels a task that was previously scheduled with scheduleTask(). It is commonly used to prevent a task from executing if it is no longer needed.
const task = zone.scheduleTask(() => {
  // This code runs later
}, 1000);

// Cancel the task
zone.cancelTask(task);

7 setInterval(): This method schedules a recurring task to be executed in the current zone. It is commonly used to run code at regular intervals.

8 clearInterval(): This method cancels a recurring task that was previously scheduled with setInterval(). It is commonly used to stop a recurring task from running.

9 setTimeout(): This method schedules a one-time task to be executed in the current zone after a specified delay. It is commonly used to run code after a certain amount of time has passed.

10 clearTimeout(): This method cancels a one-time task that was previously scheduled with setTimeout(). It is commonly used to prevent a one-time task from running if it is no longer needed.


import { Component, NgZone } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `
    <div #myElement>Hello, World!</div>
  `
})
export class AppComponent {
  constructor(private ngZone: NgZone) {}

  ngAfterViewInit() {
    this.ngZone.runOutsideAngular(() => {
      const myElement = document.querySelector('#myElement');
      const size = this.measureElement(myElement);
      console.log(size);
    });
  }

  private measureElement(element: HTMLElement): { width: number, height: number } {
    return new Promise((resolve, reject) => {
      this.ngZone.runOutsideAngular(() => {
        requestAnimationFrame(() => {
          this.ngZone.run(() => {
            const rect = element.getBoundingClientRect();
            resolve({ width: rect.width, height: rect.height });
          });
        });
      });
    });
  }
}
In this example, the ngAfterViewInit lifecycle hook is used to measure the size of an element after it has been rendered to the DOM. The measureElement method uses the Stable method to ensure that all tasks and microtasks have completed before measuring the element. The requestAnimationFrame method is used to defer the measurement until the next frame, to ensure that all layout and rendering tasks have completed. Finally, the ngZone.run method is used to ensure that the measurement is executed inside the Angular zone, so that Angular can detect changes and update the view accordingly.






